@import "src/styles/base";

.dropdown-container {
  position: relative;
  width: 320px;
  display: flex;
  flex-direction: column;

  .dropdown-input {
    position: relative;
    margin-top: 8px;
    width: 100%;
    height: 40px;
    border: $defaultBorder;
    padding: 8px 24px 8px 12px;
    outline: none;
    border-radius: $defaultBorderRadius;
    font-size: 16px;
    color: $black;
    text-overflow: ellipsis;

    &.multiselect {
      padding-right: 60px;
    }

    &:hover {
      cursor: pointer;
    }

    &:active,
    &:focus {
      & + .arrowDownIcon,
      & + .counter + .arrowDownIcon {
        transform: rotate(360deg);
      }
    }
  }

  &.withoutLabel {
    .arrowDownIcon {
      top: 20px;
    }

    .counter {
      top: 18px;
    }
  }

  .arrowDownIcon {
    display: block;
    position: absolute;
    top: 38px;
    right: 12px;
    transform: rotate(180deg);
    transition: transform 150ms linear;
    height: 15px;
    width: 15px;
    background: url("../../assets/icons/down-arrow.svg") center center no-repeat;
    background-size: contain;
  }

  .counter {
    position: absolute;
    top: 36px;
    right: 38px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: $infoBgColor;
    color: $infoColor;
    border: 1px solid $infoBorderColor;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 13px;
  }

  .values-list {
    position: absolute;
    width: 100%;
    background: $white;
    z-index: 2;
    top: 68px;
    box-shadow: 0 0.5em 1em -0.125em rgba(0, 0, 0, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.03);
    border-radius: $defaultBorderRadius;
    max-height: 0;
    overflow-x: hidden;
    text-overflow: ellipsis;
    overflow-y: auto;
    padding: 0 $defaultPadding;
    transition: max-height 150ms linear, padding 150ms linear;

    &.withoutLabel {
      top: 50px;
    }

    &.visible {
      max-height: 254px;
      padding: $defaultPadding;
    }

    .value {
      padding: $defaultPadding;
      border-radius: $defaultBorderRadius;

      &.chosenValue {
        color: $infoColor;
        background: $infoBgColor;

        &:hover {
          cursor: pointer;
          background: $infoBgColor;
        }
      }

      &:hover {
        cursor: pointer;
        background: $strokeHover;
      }
    }
  }
}
